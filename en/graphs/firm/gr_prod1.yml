params:
- {name: showEFF, value: false}
- {name: d, value: 0}
- {name: p, value: 4, min: 0, max: 12}
- {name: m, value: 100}
- {name: op1, value: 0.15}
- {name: op2, value: 0.1}
- {name: ops, value: 0.2}

- {name: b11, value: 112}
- {name: b12, value: 48}
- {name: b21, value: 36}
- {name: b22, value: 30}
- {name: b31, value: 26}
- {name: b32, value: 24}


calcs:
  b1: ((params.b11)+(params.b12))/2
  b2: ((params.b21)+(params.b22))/2
  b3: ((params.b31)+(params.b32))/2
  t11: (params.b11)/2
  t12: (params.b11+params.b12)/2
  t21: (params.b11+params.b12+params.b21)/2
  t22: (params.b11+params.b12+params.b21+params.b22)/2
  t31: (params.b11+params.b12+params.b21+params.b22+params.b31)/2
  t32: (params.b11+params.b12+params.b21+params.b22+params.b31+params.b32)/2
  t1: calcs.b1
  t2: calcs.t1+calcs.b2
  t3: calcs.t2+calcs.b3
  cs0: max((calcs.b1)-(params.p),0)+max((calcs.b2)-(params.p),0)+max((calcs.b3)-(params.p),0)
  cs1: (max((params.b11)-(params.p),0)+max((params.b12)-(params.p),0)+max((params.b21)-(params.p),0)
        +max((params.b22)-(params.p),0)+max((params.b31)-(params.p),0)+max((params.b32)-(params.p),0))/2
  dem: (12-params.p)/4
  cs2: ( -(params.p) + 12 ) * (calcs.dem)/2

aspectRatio: 1.5

layout:
  OneGraphPlusSidebar:

    graph: 
      xAxis:
        max: 3.1
        ticks: 5
      yAxis:
        max: 160
        ticks: none

      objects:

        - Label:
              coordinates: [3.1, 0]
              text: "` \\\\text{Labor (dd)} `"
              yPixelOffset: 0
              position: l
        - Label:
              coordinates: [0, 160]
              text: "` \\\\text{Output (kg)}  `"
              xPixelOffset: -5

# # price line
#         - Line:
#             slope: params.p
#             color: Green
#             strokeWidth: 1.5
#             drag:
#               - vertical: p

#         - Point: {coordinates: [0.05,0], color: Green, show: params.d !== 2}
#         - Point: {coordinates: [1, (params.p)], color: Green, droplines: {horizontal: (params.p), vertical: }, show: params.d !== 2}
#         - Point: {coordinates: [2, (2*params.p)], color: Green, droplines: {horizontal: (2*params.p), vertical: }, show: params.d !== 2}
#         - Point: {coordinates: [3, (3*params.p)], color: Green, droplines: {horizontal: (3*params.p), vertical: }, show: params.d !== 2}
#         - Point: {coordinates: [0.5, (0.5*params.p)], color: Green, droplines: {horizontal: (0.5*params.p), vertical: }, show: params.d == 1}
#         - Point: {coordinates: [1.5, (1.5*params.p)], color: Green, droplines: {horizontal: (1.5*params.p), vertical: }, show: params.d == 1}
#         - Point: {coordinates: [2.5, (2.5*params.p)], color: Green, droplines: {horizontal: (2.5*params.p), vertical: }, show: params.d == 1}


# # consumer surplus
#         - Segment: {a: [1,calcs.b1], b: [1,(params.p)], color: Blue, show: params.p < calcs.b1 && params.p > calcs.b2 && params.d == 0 && params.showCS == 1, strokeWidth: 5}
#         - Segment: {a: [2,calcs.b1+calcs.b2], b: [2,(2*params.p)], color: Blue, show: params.p <= calcs.b2 && params.p > calcs.b3 && params.d == 0 && params.showCS == 1, strokeWidth: 5}
#         - Segment: {a: [3,calcs.b1+calcs.b2+calcs.b3], b: [3,(3*params.p)], color: Blue, show: params.p <= calcs.b3 && params.d == 0 && params.showCS == 1, strokeWidth: 5}

#         - Segment: {a: [0.5,calcs.t11], b: [0.5,(0.5*params.p)], color: Blue, show: params.p <= params.b11 && params.p > params.b12 && params.d == 1 && params.showCS == 1, strokeWidth: 5}
#         - Segment: {a: [1,calcs.t12], b: [1,params.p], color: Blue, show: params.p <= params.b12 && params.p > params.b21 && params.d == 1 && params.showCS == 1, strokeWidth: 5}
#         - Segment: {a: [1.5,calcs.t21], b: [1.5,(1.5*params.p)], color: Blue, show: params.p <= params.b21 && params.p > params.b22 && params.d == 1 && params.showCS == 1, strokeWidth: 5}
#         - Segment: {a: [2,calcs.t22], b: [2,(2*params.p)], color: Blue, show: params.p <= params.b22 && params.p > params.b31 && params.d == 1 && params.showCS == 1, strokeWidth: 5}
#         - Segment: {a: [2.5,calcs.t31], b: [2.5,(2.5*params.p)], color: Blue, show: params.p <= params.b31 && params.p > params.b32 && params.d == 1 && params.showCS == 1, strokeWidth: 5}
#         - Segment: {a: [3,calcs.t32], b: [3,(3*params.p)], color: Blue, show: params.p <= params.b32 && params.d == 1 && params.showCS == 1, strokeWidth: 5}



# production possibilities whole labor units
        - Point: {coordinates: [0,0], color: Gray, r: 5}
        - Point: {coordinates: [1,0], color: Gray, r: 5}
        - Point: {coordinates: [2,0], color: Gray, r: 5}
        - Point: {coordinates: [3,0], color: Gray, r: 5}

        - Point: {coordinates: [1,calcs.b1], color: Gray, droplines: {horizontal: calcs.b1, vertical: }, r: 5}
        - Point: {coordinates: [2,calcs.b1], color: Gray, droplines: {horizontal: calcs.b1, vertical: }, r: 5}
        - Point: {coordinates: [3,calcs.b1], color: Gray, droplines: {horizontal: calcs.b1, vertical: }, r: 5}

        - Point: {coordinates: [2,calcs.b1+calcs.b2], color: Gray, droplines: {horizontal: calcs.b1+calcs.b2, vertical: }, r: 5}
        - Point: {coordinates: [3,calcs.b1+calcs.b2], color: Gray, droplines: {horizontal: calcs.b1+calcs.b2, vertical: }, r: 5}

        - Point: {coordinates: [3,calcs.b1+calcs.b2+calcs.b3], color: Gray, droplines: {horizontal: calcs.b1+calcs.b2+calcs.b3, vertical: }, r: 5}


# efficient frontier whole labor units
        - Point: {coordinates: [0,0], color: Blue, show: params.showEFF == true, r: 5}
        - Point: {coordinates: [1,calcs.b1], color: Blue, droplines: {horizontal: calcs.b1, vertical: }, show: params.showEFF == true, r: 5}
        - Point: {coordinates: [2,calcs.b1+calcs.b2], color: Blue, droplines: {horizontal: calcs.b1+calcs.b2, vertical: }, show: params.showEFF == true, r: 5}
        - Point: {coordinates: [3,calcs.b1+calcs.b2+calcs.b3], color: Blue, droplines: {horizontal: calcs.b1+calcs.b2+calcs.b3, vertical: }, show: params.showEFF == true, r: 5}






# production possibilities half labor units
        - Point: {coordinates: [0.5,0], color: Gray, show: params.d > 0, r: 5}
        - Point: {coordinates: [1.5,0], color: Gray, show: params.d > 0, r: 5}
        - Point: {coordinates: [2.5,0], color: Gray, show: params.d > 0, r: 5}

        - Point: {coordinates: [0.5,calcs.t11], color: Gray, droplines: {horizontal: calcs.t11, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [1,calcs.t11], color: Gray, droplines: {horizontal: calcs.t11, vertical: }, r: 5}
        - Point: {coordinates: [1.5,calcs.t11], color: Gray, droplines: {horizontal: calcs.t11, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [2,calcs.t11], color: Gray, droplines: {horizontal: calcs.t11, vertical: }, r: 5}
        - Point: {coordinates: [2.5,calcs.t11], color: Gray, droplines: {horizontal: calcs.t11, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [3,calcs.t11], color: Gray, droplines: {horizontal: calcs.t11, vertical: }, r: 5}

        - Point: {coordinates: [1,30], color: Gray, r: 5}
        - Point: {coordinates: [2,30], color: Gray, r: 5}
        - Point: {coordinates: [3,30], color: Gray, droplines: {horizontal: 30, vertical: }, r: 5}
        - Point: {coordinates: [0.5,30], color: Gray, r: 5, show: params.d > 0}
        - Point: {coordinates: [1.5,30], color: Gray, r: 5, show: params.d > 0}
        - Point: {coordinates: [2.5,30], color: Gray, r: 5, show: params.d > 0}

        - Point: {coordinates: [1.5,calcs.t21], color: Gray, droplines: {horizontal: calcs.t21, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [1.5,calcs.t12], color: Gray, droplines: {horizontal: calcs.t12, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [2,calcs.t21], color: Gray, droplines: {horizontal: calcs.t21, vertical: }, r: 5}
        - Point: {coordinates: [2.5,calcs.t31], color: Gray, droplines: {horizontal: calcs.t31, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [2.5,calcs.t12], color: Gray, droplines: {horizontal: calcs.t12, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [2.5,calcs.t22], color: Gray, droplines: {horizontal: calcs.t22, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [2.5,calcs.t21], color: Gray, droplines: {horizontal: calcs.t21, vertical: }, show: params.d > 0, r: 5}
        - Point: {coordinates: [3,calcs.t21], color: Gray, droplines: {horizontal: calcs.t21, vertical: }, r: 5}


# efficient frontier half labor units
        - Point: {coordinates: [0.5,calcs.t11], color: Blue, droplines: {horizontal: calcs.t11, vertical: }, show: params.d !== 0 && params.showEFF == true, r: 5}
        - Point: {coordinates: [1.5,calcs.t21], color: Blue, droplines: {horizontal: calcs.t21, vertical: }, show: params.d !== 0 && params.showEFF == true, r: 5}
        - Point: {coordinates: [2.5,calcs.t31], color: Blue, droplines: {horizontal: calcs.t31, vertical: }, show: params.d !== 0 && params.showEFF == true, r: 5}

        - Point: {coordinates: [0,0], color: Blue, show: params.showEFF == true, r: 5}
        - Point: {coordinates: [1,calcs.b1], color: Blue, droplines: {horizontal: calcs.b1, vertical: }, show: params.showEFF == true, r: 5}
        - Point: {coordinates: [2,calcs.b1+calcs.b2], color: Blue, droplines: {horizontal: calcs.b1+calcs.b2, vertical: }, show: params.showEFF == true, r: 5}
        - Point: {coordinates: [3,calcs.b1+calcs.b2+calcs.b3], color: Blue, droplines: {horizontal: calcs.b1+calcs.b2+calcs.b3, vertical: }, show: params.showEFF == true, r: 5}


# production possibilities divisible labor
        - Curve:
            fn: 80*(x)^0.5
            color: Lightgrey
            strokeWidth: 1.5
            min: 0
            max: 3
            show: params.d == 2

        - Area:
            fn: 80*(x)^0.5
            fill: Gray
            min: 0
            max: 3
            show: params.d == 2

# efficient frontier divisible labor
        - Curve:
            fn: 80*(x)^0.5
            color: Blue
            strokeWidth: 2
            min: 0
            max: 3
            show: params.d == 2 && params.showEFF == true





# # tangent
#         - Line:
#             point: [calcs.dem,(12*(calcs.dem))-2*(calcs.dem)^2]
#             slope: params.p
#             color: Black
#             min: calcs.dem-1
#             max: calcs.dem+1
#             strokeWidth: 1
#             show: params.d == 2








#     bottomGraph: 
#       xAxis:
#         max: 3.3
#         ticks: 5
#       yAxis:
#         max: 13
#         ticks: 5

#       objects:

#         - Label:
#               coordinates: [3.3, 0]
#               text: "` \\\\text{litri} `"
#               yPixelOffset: 0
#               position: l
#         - Label:
#               coordinates: [0, 13]
#               text: "` \\\\text{euro/litro}  `"
#               xPixelOffset: 0

# # price line
#         - Line:
#             yIntercept: params.p
#             color: Green
#             strokeWidth: 1.5
#             label:
#               text: P
#               x: 3.1
#               position: b
#             drag:
#               - vertical: p

# # WTP and CS for whole units
#         - Point: {coordinates: [1,calcs.b1], color: Blue, droplines: {horizontal: calcs.b1, vertical: }, show: params.d == 0}
#         - Point: {coordinates: [2,calcs.b2], color: Blue, droplines: {horizontal: calcs.b2, vertical: }, show: params.d == 0}
#         - Point: {coordinates: [3,calcs.b3], color: Blue, droplines: {horizontal: calcs.b3, vertical: }, show: params.d == 0}
#         - Area: {fn1: calcs.b1, fn2: params.p, fill: Blue, opacity: params.ops, min: 0, max: 1, show: params.p < calcs.b1 && params.d == 0 && params.showCS == true}
#         - Area: {fn1: calcs.b2, fn2: params.p, fill: Blue, opacity: params.ops, min: 1, max: 2, show: params.p < calcs.b2 && params.d == 0 && params.showCS == true}
#         - Area: {fn1: calcs.b3, fn2: params.p, fill: Blue, opacity: params.ops, min: 2, max: 3, show: params.p < calcs.b3 && params.d == 0 && params.showCS == true}

#         - Point: {coordinates: [1,calcs.b1], color: Blue, show: params.d == 1, opacity: params.op1}
#         - Segment: {a: [0,calcs.b1], b: [1,calcs.b1], lineStyle: dotted, color: Blue, show: params.d == 1, strokeWidth: 0.2}
#         - Segment: {a: [1,calcs.b1], b: [1,0], lineStyle: dotted, color: Blue, show: params.d == 1, strokeWidth: 0.2}
#         - Point: {coordinates: [2,calcs.b2], color: Blue, show: params.d == 1, opacity: params.op1}
#         - Segment: {a: [0,calcs.b2], b: [2,calcs.b2], lineStyle: dotted, color: Blue, show: params.d == 1, strokeWidth: 0.2}
#         - Segment: {a: [2,calcs.b2], b: [2,0], lineStyle: dotted, color: Blue, show: params.d == 1, strokeWidth: 0.2}
#         - Point: {coordinates: [3,calcs.b3], color: Blue, show: params.d == 1, opacity: params.op1}
#         - Segment: {a: [0,calcs.b3], b: [3,calcs.b3], lineStyle: dotted, color: Blue, show: params.d == 1, strokeWidth: 0.2}
#         - Segment: {a: [3,calcs.b3], b: [3,0], lineStyle: dotted, color: Blue, show: params.d == 1, strokeWidth: 0.2}



# # WTP and CS for half units
#         - Point: {coordinates: [0.5,params.b11], color: Blue, droplines: {horizontal: params.b11, vertical: }, show: params.d == 1}
#         - Point: {coordinates: [1,params.b12], color: Blue, droplines: {horizontal: params.b12, vertical: }, show: params.d == 1}
#         - Point: {coordinates: [1.5,params.b21], color: Blue, droplines: {horizontal: params.b21, vertical: }, show: params.d == 1}
#         - Point: {coordinates: [2,params.b22], color: Blue, droplines: {horizontal: params.b22, vertical: }, show: params.d == 1}
#         - Point: {coordinates: [2.5,params.b31], color: Blue, droplines: {horizontal: params.b31, vertical: }, show: params.d == 1}
#         - Point: {coordinates: [3,params.b32], color: Blue, droplines: {horizontal: params.b32, vertical: }, show: params.d == 1}
#         - Area: {fn1: params.b11, fn2: params.p, fill: Blue, opacity: params.ops, min: 0, max: 0.5, show: params.p < params.b11 && params.d == 1 && params.showCS == true}
#         - Area: {fn1: params.b12, fn2: params.p, fill: Blue, opacity: params.ops, min: 0.5, max: 1, show: params.p < params.b12 && params.d == 1 && params.showCS == true}
#         - Area: {fn1: params.b21, fn2: params.p, fill: Blue, opacity: params.ops, min: 1, max: 1.5, show: params.p < params.b21 && params.d == 1 && params.showCS == true}
#         - Area: {fn1: params.b22, fn2: params.p, fill: Blue, opacity: params.ops, min: 1.5, max: 2, show: params.p < params.b22 && params.d == 1 && params.showCS == true}
#         - Area: {fn1: params.b31, fn2: params.p, fill: Blue, opacity: params.ops, min: 2, max: 2.5, show: params.p < params.b31 && params.d == 1 && params.showCS == true}
#         - Area: {fn1: params.b32, fn2: params.p, fill: Blue, opacity: params.ops, min: 2.5, max: 3, show: params.p < params.b32 && params.d == 1 && params.showCS == true}

#         - Point: {coordinates: [0.5,params.b11], color: Blue, show: params.d == 2, opacity: params.op1}
#         - Segment: {a: [0,params.b11], b: [0.5,params.b11], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Segment: {a: [0.5,params.b11], b: [0.5,0], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Point: {coordinates: [1,params.b12], color: Blue, show: params.d == 2, opacity: params.op1}
#         - Segment: {a: [0,params.b12], b: [1,params.b12], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Segment: {a: [1,params.b12], b: [1,0], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Point: {coordinates: [1.5,params.b21], color: Blue, show: params.d == 2, opacity: params.op1}
#         - Segment: {a: [0,params.b21], b: [1.5,params.b21], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Segment: {a: [1.5,params.b21], b: [1.5,0], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Point: {coordinates: [2,params.b22], color: Blue, show: params.d == 2, opacity: params.op1}
#         - Segment: {a: [0,params.b22], b: [2,params.b22], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Segment: {a: [2,params.b22], b: [2,0], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Point: {coordinates: [2.5,params.b31], color: Blue, show: params.d == 2, opacity: params.op1}
#         - Segment: {a: [0,params.b31], b: [2.5,params.b31], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Segment: {a: [2.5,params.b31], b: [2.5,0], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Point: {coordinates: [3,params.b32], color: Blue, show: params.d == 2, opacity: params.op1}
#         - Segment: {a: [0,params.b32], b: [3,params.b32], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}
#         - Segment: {a: [3,params.b32], b: [3,0], lineStyle: dotted, color: Blue, show: params.d == 2, strokeWidth: 0.2}




# # WTP and CS in infinitely divisible case
#         - Curve:
#             fn: 12-4*(x)
#             color: Blue
#             strokeWidth: 1.5
#             show: params.d == 2
#         - Area: {fn1: 12-4*(x), fn2: params.p, fill: Blue, opacity: params.ops, min: 0, 
#                         max: calcs.dem, show: params.d == 2 && params.showCS == true}

#         - Point: {coordinates: [calcs.dem,params.p], color: Blue, droplines: {vertical: calcs.dem}, show: params.d == 2}



    sidebar:
      controls:
      - title: Production Possibilities
        # sliders:
        # - param: p
        #   label: P
        radioGroup:
          param: d
          options:
            - Labor hired by whole days
            - Labor hired by half days
            - Labor hired by small fractions of time
        checkboxes:
        - param: showEFF
          label: "` \\\\textit{Highlight Efficient Frontier} `"
        divs:
        - html: "`  `"
        - html: "`  `"
        - html: "`  `"

    explanation:
      divs:
        - html: "` The points in the graph represent the production possibilities available to the firm
                  when workers must be hired in multiples of full days. When the firm hires zero labor, output is zero.
                  By hiring a worker for a day, the firm can obtain an output equal to zero (e.g. by asking the
                  worker to relax and do nothing), equal to 80 (the maximum output obtainable with a full day of
                  work), or 30, or 56 (by exploiting to a less than full extent the worker's productivity).
                  By hiring a worker for two days (or two workers for one day each) the firnm can obtain an 
                  output equal to 0, 30, 56, 80, 98 or 113, and so on. `"
          show: params.d == 0
        - html: "` Among all production possibilities, the firm is interested only in the
                   <b>efficient</b> ones, namely those for which output is maximum (when discussing profit 
                   maximization later on, the reason why this is so will become obvious). Toggle the checkbox
                   <i>Highlight Efficient Frontier</i> to highlight the efficient production possibilities
                    (blue points in the graph). `"
          show: params.d == 0
        - html: "` The points in the graph represent the production possibilities available to the firm
                  when workers must be hired in multiples of half days. In this case, besides the production
                   possibilities already available when workers must be hired by full days,
                  the firm has new possibilities, such as producing 126 units of output by using 2.5 days of labor. `"
          show: params.d == 1
        - html: "` Among all production possibilities, the firm is interested only in the
                   <b>efficient</b> ones, namely those for which output is maximum (when discussing profit 
                   maximization later on, the reason why this is so will become obvious). Toggle the checkbox
                   <i>Highlight Efficient Frontier</i> to highlight the efficient production possibilities
                    (blue points in the graph). `"
          show: params.d == 1
        - html: "` When labor is a finely divisible input, i.e. when the firm can hire workers for small fractions of
                 time, besides the production
                   possibilities already available when workers must be hired by half days, the firm has 
                   many more production possibilities (any point in the grey area). `"
          show: params.d == 2
        - html: "` Among all production possibilities, the firm is interested only in the
                   <b>efficient</b> ones, namely those for which output is maximum (when discussing profit 
                   maximization later on, the reason why this is so will become obvious). Toggle the checkbox
                   <i>Highlight Efficient Frontier</i> to highlight the efficient production possibilities
                    (the blue curve in the graph). `"
          show: params.d == 2
