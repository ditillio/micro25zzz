params:
- {name: showCS, value: false}
- {name: op1, value: 0.15}
- {name: op2, value: 0.1}
- {name: ops, value: 0.2}
- {name: x, value: 120, min: 0, max: 200}
- {name: a, value: 80, min: 60, max: 100, round: 5}
- {name: alpha, value: 0.5, min: 0.5, max: 1, round: 0.5}
- {name: w, value: 64, min: 40, max: 80, round: 1}
- {name: fc, value: 100, min: 0, max: 200, round: 5}

calcs:
  l: ((params.x)/(params.a))^(1/(params.alpha))
  vc: params.w * calcs.l
  tc: params.w * calcs.l + params.fc
  avc: calcs.vc / params.x
  atc: calcs.tc / params.x
  afc: (params.fc) / (params.x)
  mc: (1/(params.alpha)) * calcs.avc
  aaa: (params.alpha)^(-1)

aspectRatio: 0.85

layout:
  TwoVerticalGraphsPlusSidebar:

    topGraph: 
      xAxis:
        max: 210
        ticks: 0
      yAxis:
        max: 500
        ticks: 0

      objects:

        - Label:
                coordinates: [210, 0]
                text: "` \\\\text{Output (kg)}  `"
                xPixelOffset: 0

        - Label:
                coordinates: [0, 500]
                text: "` \\\\text{Euro} `"
                yPixelOffset: 0
                xPixelOffset: 0
                position: c

# points
        - Point: {coordinates: [params.x, calcs.tc], droplines: {vertical: params.x.toFixed(1), horizontal: calcs.tc.toFixed(2)}, color: Brown, r: 4}
        - Point: {coordinates: [params.x, calcs.vc], droplines: {vertical: , horizontal: calcs.vc.toFixed(2)}, color: Darkorange, r: 4}
        - Point: {coordinates: [params.x, params.fc], droplines: {vertical: , horizontal: params.fc.toFixed(2)}, color: Gray, r: 4}

# VC (quadratic)

        - Curve:
            fn: params.w * ( (x) / (params.a) ) ^ 2
            color: Darkorange
            label:
              text: "` VC(Q) = \\\\dfrac{ ${params.w} }{ ${params.a}^2 } Q^2 `"
              x: 200
              position: tl
            strokeWidth: 1.7
            max: 210
            show: params.alpha == 0.5 && params.fc > 0

# VC (linear)

        - Curve:
            fn: params.w * ( (x) / (params.a) )
            color: Darkorange
            label:
              text: "` VC(Q) = ( ${params.w} / ${params.a} ) Q `"
              x: 200
              position: c
            strokeWidth: 1.7
            show: params.alpha == 1

# TC (quadratic)

        - Curve:
            fn: params.w * ( (x) / (params.a) ) ^ 2 + params.fc
            color: Brown
            label:
              text: "` C(Q) = ${params.fc} + \\\\dfrac{ ${params.w} }{ ${params.a}^2 } Q^2 `"
              x: 200
              position: r
              bgcolor: none
            strokeWidth: 1.7
            max: 210
            show: params.alpha == 0.5 && params.fc > 0

# TC=VC with FC=0 (quadratic)

        - Curve:
            fn: params.w * ( (x) / (params.a) ) ^ 2 + params.fc
            color: brown
            label:
              text: "` C(Q) = VC(Q) = \\\\dfrac{ ${params.w} }{ ${params.a}^2 } Q^2 `"
              x: 200
              position: c
            strokeWidth: 1.7
            max: 210
            show: params.alpha == 0.5 && params.fc == 0

# TC (linear)

        - Curve:
            fn: params.w * ( (x) / (params.a) ) + params.fc
            color: Brown
            label:
              text: "` C(Q) = ${params.fc} + ( ${params.w} / ${params.a} ) Q `"
              x: 200  
              position: c
            strokeWidth: 1.7
            show: params.alpha == 1

# FC curve

        - Curve:
            fn: params.fc
            color: Gray
            label:
              text: FC
              x: 210
              position: l
              bgcolor: none
            strokeWidth: 1.7
            show: params.fc > 0









    bottomGraph: 
      xAxis:
        max: 210
        ticks: 0
      yAxis:
        max: 7
        ticks: 0

      objects:

        - Label:
                coordinates: [210, 0]
                text: "` \\\\text{Output (kg)}  `"
                xPixelOffset: 0

        - Label:
                coordinates: [0, 7]
                text: "` \\\\text{Euro / kg} `"
                yPixelOffset: 0
                xPixelOffset: 0
                position: c

# points
        - Point: {coordinates: [params.x, calcs.atc], droplines: {vertical: params.x.toFixed(1), horizontal: calcs.atc.toFixed(2)}, color: Brown, r: 4}
        - Point: {coordinates: [params.x, calcs.avc], droplines: {vertical: , horizontal: calcs.avc.toFixed(2)}, color: Darkorange, r: 4}
        - Point: {coordinates: [params.x, calcs.afc], droplines: {vertical: , horizontal: calcs.afc.toFixed(2)}, color: Gray, r: 4}
        - Point: {coordinates: [params.x, calcs.mc], droplines: {vertical: , horizontal: calcs.mc.toFixed(2)}, color: Red, r: 4}

# MC (quadratic)

        - Curve:
            fn: 2 * params.w * (x) / ((params.a)^ 2)
            color: Red
            label:
              text: "` MC(Q) = 2 ( ${params.w} / ${params.a}^2 ) Q `"
              x: 200
              position: b
            strokeWidth: 1.7
            max: 200
            show: params.alpha == 0.5

# AVC (quadratic)

        - Curve:
            fn: params.w * (x) / ((params.a)^ 2)
            color: Darkorange
            label:
              text: "` AVC(Q) = ( ${params.w} / ${params.a}^2 ) Q `"
              x: 200  
              position: c
            strokeWidth: 1.7
            show: params.alpha == 0.5 && params.fc > 0

# AVC (linear)

        - Curve:
            fn: params.w / params.a
            color: Darkorange
            label:
              text: "` AVC(Q) = ( ${params.w} / ${params.a} ) `"
              x: 200  
              position: l
            strokeWidth: 1.7
            show: params.alpha == 1

# ATC (quadratic)

        - Curve:
            fn: params.w * (x) / ((params.a)^2) + params.fc / (x)
            color: brown
            label:
              text: "` AC(Q) = ${params.fc}/Q + ( ${params.w} / ${params.a}^2 ) Q  `"
              x: 200  
              position: c
            strokeWidth: 1.7
            show: params.alpha == 0.5 && params.fc > 0

# ATC=AVC with FC=0 (quadratic)

        - Curve:
            fn: params.w * (x) / ((params.a)^ 2)
            color: Brown
            label:
              text: "` AC(Q) = AVC(Q) = ( ${params.w} / ${params.a}^2 ) Q `"
              x: 200  
              position: c
            strokeWidth: 1.7
            show: params.alpha == 0.5 && params.fc == 0

# ATC (linear)

        - Curve:
            fn: ( params.w / params.a ) + ( params.fc / (x) )
            color: brown
            label:
              text: "` AC(Q) = ${params.fc} + ( ${params.w} / ${params.a} ) Q `"
              x: 200  
              position: l
            strokeWidth: 1.7
            show: params.alpha == 1

# AFC curve

        - Curve:
            fn: params.fc / (x)
            color: Gray
            label:
              text: "` AFC(Q) = ${params.fc} / Q  `"
              x: 200
              position: l
            strokeWidth: 1.7
            show: params.fc > 0


    sidebar:
      controls:
      - title: Costs and Unit Costs
        sliders:
        - param: a
          label: A
        - param: alpha
          label: \alpha
        - param: fc
          label: FC
        - param: w
          label: W
        - param: x
          label: Q
        divs:
        - html: "` `"
        - html: "` `"
        - html: "` `"
        - html: "` `"
        - html: "` `"
        - html: "` At the level of production $ Q = ${params.x} $ the firm's costs are
                  $$ C(${params.x}) = ${calcs.tc.toFixed(2)} $$
                  $$ VC(${params.x}) = ${calcs.vc.toFixed(2)} $$
                  $$ FC = ${params.fc.toFixed(2)} $$
                  On a per unit basis, costs are
                  $$ AC(${params.x}) = ${calcs.atc.toFixed(2)} $$
                  $$ AVC(${params.x}) = ${calcs.avc.toFixed(2)} $$
                  $$ AFC(${params.x}) = ${calcs.afc.toFixed(2)} $$
                  $$ MC(${params.x}) = ${calcs.mc.toFixed(2)} $$
                   `"
          show: params.w > 0