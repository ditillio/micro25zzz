---
schema: EconSchema
version: 1
params:
- {name: w, value: 35, min: 20, max: 60}
- {name: M, value: 70, min: 0, max: 120, round: 10}
- {name: L, value: 3, min: 0, max: 7}
- {name: p, value: 20, min: 10, max: 30}

- {name: P0, value: 10, min: 5, max: 15}
- {name: P1, value: 10, min: 5, max: 15}
- {name: M0, value: 1000, min: 800, max: 1200, round: 100}
- {name: M1, value: 1200, min: 800, max: 1400, round: 100}
- {name: R, value: 0.2, min: -0.2, max: 0.4, round: 0.01}

- {name: percentS, value: 0.4, min: -1, max: 1, round: 0.01}


calcs:

  realinterest: (1+(params.R))*(params.P0)/params.P1
  endowment0: params.M0 / params.P0
  endowment1: params.M1 / params.P1
  maxconsumption0: ((params.M0) + (params.M1)/(1+(params.R))) / params.P0
  maxconsumption1: ((params.M1) + (1+(params.R))*(params.M0)) / params.P1
  S: params.percentS * params.M0
  C0: calcs.endowment0 - calcs.S/params.P0
  C1: calcs.endowment1 + calcs.S * ( 1 + params.R ) / params.P1
  delta0: calcs.C0 - calcs.endowment0
  delta1: calcs.C1 - calcs.endowment1

aspectRatio: 1.25

layout:
  type: OneGraphPlusSidebar
  def:
    graph:
      xAxis:
        orient: bottom
        min: 0
        max: 250
        ticks: 0
      yAxis:
        orient: left
        min: 0
        max: 280
        ticks: 0
      objects:


      - Label:
            coordinates: [245, 0]
            text: "` \\\\text{present} `"
            yPixelOffset: 10
            position: l
      - Label:
            coordinates: [245, 0]
            text: "` \\\\text{consumption} `"
            yPixelOffset: -5
            position: l

      - Label:
            coordinates: [0, 280]
            text: "` \\\\text{future}  `"
            xPixelOffset: -5
            yPixelOffset: 10
      - Label:
            coordinates: [0, 280]
            text: "` \\\\text{consumption}  `"
            xPixelOffset: -5
            yPixelOffset: -5


# budget line
      - type: Segment
        def:
          a:
          - 0
          - calcs.maxconsumption1
          b:
          - calcs.maxconsumption0
          - 0
          color: Blue
          strokeWidth: 2
          label:
            text: "`   `"
            location: 0.5
            yPixelOffset: 0

# chosen point
      - Point:
          coordinates: [calcs.C0, calcs.C1]
          droplines:
            vertical: calcs.C0.toFixed(2)
            horizontal: calcs.C1.toFixed(2)
          color: Blue
          drag:
            - directions: x
              param: percentS
              expression: ((params.M0)-(params.P0)*(drag.x))/(params.M0)

# endowment point
      - type: EconBundle
        def:
          name: endowmentBundle
          coordinates:
          - calcs.endowment0
          - calcs.endowment1
          droplines:
            vertical: calcs.endowment0.toFixed(2)
            horizontal: calcs.endowment1.toFixed(2)
          color: Black
          label:
            text: \text{Initial situation}

      - Arrow:
          begin: [calcs.endowment0+30,20]
          end: [calcs.endowment0,0]
          color: Black
          strokeWidth: 1
          trim: 0.05
          label:
            text: "` \\\\footnotesize \\\\dfrac{M_0}{P_0} `"
            position: bl
          show: params.percentS>=0
      - Arrow:
          begin: [calcs.endowment0-30,20]
          end: [calcs.endowment0,0]
          color: Black
          strokeWidth: 1
          trim: 0.05
          label:
            text: "` \\\\footnotesize \\\\dfrac{M_0}{P_0} `"
            position: br
          show: params.percentS<0

      - Arrow:
          begin: [calcs.endowment0*0.3,calcs.endowment1*0.5]
          end: [0, calcs.endowment1]
          color: Black
          strokeWidth: 1
          trim: 0.05
          label:
            text: "` \\\\footnotesize \\\\dfrac{M_1}{P_1} `"
            location: 1
          show: params.percentS>=0
      - Arrow:
          begin: [30, calcs.endowment1+30]
          end: [0, calcs.endowment1]
          color: Black
          strokeWidth: 1
          trim: 0.05
          label:
            text: "` \\\\footnotesize \\\\dfrac{M_1}{P_1} `"
            location: 1
          show: params.percentS<0





# decrease present consumption when S>0
      - Arrow:
          begin: [calcs.endowment0, calcs.endowment1*0.5]
          end: [calcs.C0, calcs.endowment1*0.5]
          color: supply
          label:
            text: "` ${calcs.delta0.toFixed(2)} `"
            position: b
          strokeWidth: 1
          show: calcs.S > 0

# increase future consumption when S>0
      - Arrow:
          begin: [calcs.C0*0.5, calcs.endowment1]
          end: [calcs.C0*0.5, calcs.C1]
          color: demand
          label:
            text: "` + ${calcs.delta1.toFixed(2)} `"
            position: c
          strokeWidth: 1
          show: calcs.S > 0

# increase present consumption when S<0
      - Arrow:
          begin: [calcs.endowment0, calcs.C1*0.5]
          end: [calcs.C0, calcs.C1*0.5]
          color: supply
          label:
            text: "` + ${calcs.delta0.toFixed(2)} `"
            position: b
          strokeWidth: 1
          show: calcs.S < 0

# decrease future consumption when S<0
      - Arrow:
          begin: [calcs.endowment0*0.5, calcs.endowment1]
          end: [calcs.endowment0*0.5, calcs.C1]
          color: demand
          label:
            text: "` ${calcs.delta1.toFixed(2)} `"
            position: c
          strokeWidth: 1
          show: calcs.S < 0












    sidebar:
      controls:

      - title: Intertemporal budget constraint
        description: Drag the blue point in the graph to choose a combination of present and
                    future consumption on the budget line. Move one of the sliders below to see
                    how the budget constraint changes as its parameters change (present and future
                    income, present and future price, interest rate).
        sliders:
        - param: M0
          label: M_0
        - param: M1
          label: M_1
        - param: P0
          label: P_0
        - param: P1
          label: P_1
        - param: R
          label: R


    explanation:
        divs:
        - html: "` In the initial situation (the consumer does not save or borrow)
                  present consumption is 
                  $M_0/P_0=${calcs.endowment0.toFixed(2)}$, while future consumption is 
                  $M_1/P_1=${calcs.endowment1.toFixed(2)}$.
                    `"

        - html: "` Consuming ${-calcs.delta0.toFixed(2)} units less in the present period
                  (that is, saving $S=${calcs.S.toFixed(2)}$ euros) allows consuming
                   ${calcs.delta1.toFixed(2)} units more in the future.
                    `"
          show: calcs.S>0

        - html: "` Consuming ${calcs.delta0.toFixed(2)} units more in the present period
                 (that is, borrowing  ${-calcs.S.toFixed(2)} euros) reduces
                  future consumption by ${-calcs.delta1.toFixed(2)} units.
                    `"
          show: calcs.S<0







