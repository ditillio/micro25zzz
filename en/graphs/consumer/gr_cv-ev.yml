---
schema: EconSchema
version: 1
aspectRatio: 0.7
params:

- {name: dlt, value: 0.5} # dotted drop lines thickness

- {name: p1, value: 9}
- {name: p1new, value: 36}
- {name: p2, value: 18}
- {name: m, value: 360}

- {name: a, value: 1}
- {name: b, value: 1}

- {name: showCVEV, value: 0}

- {name: s, value: 60, min: 0, max: 480, round: 60}
- {name: t, value: 60, min: 0, max: 240, round: 30}


calcs:
  s1: (params.a)/((params.a)+(params.b)) # share of income spent on good 1
  s2: (1)-(calcs.s1) # share of income spent on good 2
  x1old: (calcs.s1)*(params.m)/(params.p1) # optimal qty good 1 at old prices
  x2old: (calcs.s2)*(params.m)/(params.p2) # optimal qty good 2 at old prices
  uold: ((calcs.x1old)^(params.a))*((calcs.x2old)^(params.b)) # max utility at old prices

  x1new: (calcs.s1)*(params.m)/(params.p1new) # optimal qty good 1 at new prices
  x2new: (calcs.s2)*(params.m)/(params.p2) # optimal qty good 2 at new prices
  unew: ((calcs.x1new)^(params.a))*((calcs.x2new)^(params.b)) # max utility at new prices

  deltaCS: (calcs.s1)*(params.m)*log((params.p1new)/(params.p1))
  x1deltaCS: (calcs.s1)*((params.m)+(calcs.deltaCS))/(params.p1new) 
  x2deltaCS: (calcs.s2)*((params.m)+(calcs.deltaCS))/(params.p2) 
  udeltaCS: ((calcs.x1deltaCS)^(params.a))*((calcs.x2deltaCS)^(params.b))


  # expenditure function at old utility and old prices (=income)
  expuoldpold: ((calcs.uold)^(1/((params.a)+(params.b))))*(((params.p1)/(calcs.s1))^(calcs.s1))*(((params.p2)/(calcs.s2))^(calcs.s2))

  # expenditure function at new utility and old prices
  expunewpold: ((calcs.unew)^(1/((params.a)+(params.b))))*(((params.p1)/(calcs.s1))^(calcs.s1))*(((params.p2)/(calcs.s2))^(calcs.s2))

  # expenditure function at old utility and new prices
  expuoldpnew: ((calcs.uold)^(1/((params.a)+(params.b))))*(((params.p1new)/(calcs.s1))^(calcs.s1))*(((params.p2)/(calcs.s2))^(calcs.s2))

  # expenditure function at new utility and new prices (=income)
  expunewpnew: ((calcs.unew)^(1/((params.a)+(params.b))))*(((params.p1new)/(calcs.s1))^(calcs.s1))*(((params.p2)/(calcs.s2))^(calcs.s2))



# tax
  x1t: (calcs.s1)*((params.m)-(params.t))/(params.p1) # demand of good 1 with tax at old prices
  x2t: (calcs.s2)*((params.m)-(params.t))/(params.p2) # demand of good 2 with tax at old prices
  xmaxT: ((params.m)-(params.t))/params.p1
  ymaxT: ((params.m)-(params.t))/params.p2
  MminusT: (params.m)-(params.t)
  tcheck: (params.t)-(calcs.EV.toFixed(0))
  utax: ((calcs.x1t)^(params.a))*((calcs.x2t)^(params.b)) # max utility with tax

# tax = EV
  EV: (calcs.expunewpnew)-(calcs.expunewpold)
  x1cunew: (calcs.s1)*((params.m)-(calcs.EV))/(params.p1) # hicksian demand of good 1 at new util and old prices
  x2cunew: (calcs.s2)*((params.m)-(calcs.EV))/(params.p2) # hicksian demand of good 2 at new util and old prices
  xmaxEV: ((params.m)-(calcs.EV))/params.p1
  ymaxEV: ((params.m)-(calcs.EV))/params.p2
  MminusEV: (params.m)-(calcs.EV)

# subsidy
  x1s: (calcs.s1)*((params.m)+(params.s))/(params.p1new) # demand of good 1 with subsidy at new prices
  x2s: (calcs.s2)*((params.m)+(params.s))/(params.p2) # demand of good 2 with subsidy at new prices
  xmaxS: ((params.m)+(params.s))/params.p1new
  ymaxS: ((params.m)+(params.s))/params.p2
  MplusS: (params.m)+(params.s)
  scheck: (params.s)-(calcs.CV.toFixed(0))
  usub: ((calcs.x1s)^(params.a))*((calcs.x2s)^(params.b)) # max utility with subsidy

# subsidy = CV
  CV: (calcs.expuoldpnew)-(calcs.expuoldpold)
  x1cuold: (calcs.s1)*((params.m)+(calcs.CV))/(params.p1new) # hicksian demand of good 1 at old util and new prices
  x2cuold: (calcs.s2)*((params.m)+(calcs.CV))/(params.p2) # hicksian demand of good 2 at old util and new prices
  xmaxCV: ((params.m)+(calcs.CV))/params.p1new
  ymaxCV: ((params.m)+(calcs.CV))/params.p2
  MplusCV: (params.m)+(calcs.CV)


  maxX: (1.02)*(params.m)/(params.p1) # max displayed qty good 1
  maxY: (1.4)*(params.m)/(params.p2) # max displayed qty good 2
  maxEUR: (1.2)*(params.p1new) # max displayed price good 1 (bottom graph)
  maxE: (1.1)*((params.m)+(calcs.CV)) # max displayed expenditure (bottom graph)



layout:
  TwoVerticalGraphsPlusSidebar:

    topGraph:
      xAxis:
        max: calcs.maxX
        ticks: 0
      yAxis:
        max: calcs.maxY
        ticks: 0



      objects:

      - Label:
            coordinates: [calcs.maxX, 0]
            text: "` \\\\text{Consumption (kg)} `"
            position: l
      - Label:
            coordinates: [0, calcs.maxY]
            text: "` \\\\text{Housing (tens of m$^2$)}  `"


# old optimal bundle
      - Point:
          coordinates: [calcs.x1old, calcs.x2old]
          droplines:
            horizontal: calcs.x2old.toFixed(0)
            vertical: calcs.x1old.toFixed(0)
          strokeWidth: params.dlt
          color: Blue
          r: 3
          label:
            text: "` \\\\large A `"
            position: bl

# indifference curve at old optimal bundle
      - Curve:
          fn: ((calcs.uold)/((x)^(params.a)))^(1/(params.b))
          color: Black
          strokeWidth: 1.25
      
# old budget constraint 
      - Line:
          yIntercept: (params.m)/(params.p2)
          slope: -(params.p1)/(params.p2)
          color: Darkgreen
          strokeWidth: 1.25
      - Point:
          coordinates: [(params.m)/(params.p1), 0]
          droplines:
            vertical: (params.m)/(params.p1)
          strokeWidth: params.dlt
          color: grey
          r: 0
      - Point:
          coordinates: [0,(params.m)/(params.p2)]
          droplines:
            horizontal: (params.m)/(params.p2)
          strokeWidth: params.dlt
          color: grey
          r: 0
      
# new budget constraint 
      - Line:
          yIntercept: (params.m)/(params.p2)
          slope: -(params.p1new)/(params.p2)
          color: Darkgreen
          strokeWidth: 1.25
      - Point:
          coordinates: [(params.m)/(params.p1new), 0]
          droplines:
            vertical: (params.m)/(params.p1new)
          strokeWidth: params.dlt
          color: grey
          r: 0

# new optimal bundle
      - Point:
          coordinates: [calcs.x1new, calcs.x2new]
          droplines:
            # horizontal: calcs.x2new.toFixed(0)
            vertical: calcs.x1new.toFixed(0)
          strokeWidth: params.dlt
          color: Blue
          r: 3
          label:
            text: "` \\\\large B `"
            position: tr
          show: params.t < calcs.EV
      - Point:
          coordinates: [calcs.x1new, calcs.x2new]
          droplines:
            # horizontal: calcs.x2new.toFixed(0)
            vertical: calcs.x1new.toFixed(0)
          strokeWidth: params.dlt
          color: Blue
          r: 3
          label:
            text: "` \\\\large B `"
            position: bl
          show: params.t >= calcs.EV

# indifference curve at new optimal bundle
      - Curve:
          fn: ((calcs.unew)/((x)^(params.a)))^(1/(params.b))
          color: Black
          strokeWidth: 1.25








# budget constraint with subsidy
      - Line:
          yIntercept: ((params.m)+(params.s))/(params.p2)
          slope: -(params.p1new)/(params.p2)
          color: Red
          strokeWidth: 1.25
          show: params.showCVEV == 1 && params.s !== calcs.CV.toFixed(0) && params.s > 0
      - Point:
          coordinates: [calcs.x1s, calcs.x2s]
          droplines:
            horizontal: calcs.x2s.toFixed(1)
            vertical: calcs.x1s.toFixed(1)
          color: Red
          strokeWidth: params.dlt
          r: 3
          label:
            text: "` \\\\large C `"
            position: bl
          show: params.showCVEV == 1 && params.s > 0
      - Point:
          coordinates: [calcs.xmaxS, 0]
          droplines:
            vertical: calcs.xmaxS.toFixed(1)
          color: grey
          strokeWidth: params.dlt
          r: 0
          show: params.showCVEV == 1 && params.s > 0
      - Point:
          coordinates: [0,calcs.ymaxS]
          droplines:
            horizontal: calcs.ymaxS.toFixed(1)
          color: grey
          strokeWidth: params.dlt
          r: 0
          show: params.showCVEV == 1 && params.s > 0
      - Label:
          coordinates: [(0.7)*(calcs.maxX), (0.7)*(calcs.maxY)]
          text: \text{\LARGE BINGO!}
          color: Red
          position: c
          bgcolor: none
          show: params.showCVEV == 1 && calcs.scheck == 0 && params.s > 0
      - Label:
          coordinates: [(0.7)*(calcs.maxX), (0.6)*(calcs.maxY)]
          text: "` \\\\Large CV = ${calcs.CV.toFixed(0)} `"
          color: Red
          position: c
          bgcolor: none
          show: params.showCVEV == 1 && calcs.scheck == 0 && params.s > 0


# indifference curve at optimal bundle with subsidy
      - Curve:
          fn: ((calcs.usub)/((x)^(params.a)))^(1/(params.b))
          color: Black
          strokeWidth: 1.25
          show: params.showCVEV == 1 && calcs.scheck !== 0 && params.s > 0





# budget constraint with tax
      - Line:
          yIntercept: ((params.m)-(params.t))/(params.p2)
          slope: -(params.p1)/(params.p2)
          color: Red
          strokeWidth: 1.25
          show: params.showCVEV == 2 && params.t !== calcs.EV.toFixed(0) && params.t > 0
      - Point:
          coordinates: [calcs.x1t, calcs.x2t]
          droplines:
            horizontal: calcs.x2t.toFixed(1)
            vertical: calcs.x1t.toFixed(1)
          color: Red
          strokeWidth: params.dlt
          r: 3
          label:
            text: "` \\\\large E `"
            position: tr
          show: params.showCVEV == 2 && ( params.t < 60 || params.t > 180 ) && params.t > 0
      - Point:
          coordinates: [calcs.x1t, calcs.x2t]
          droplines:
            horizontal: calcs.x2t.toFixed(1)
            vertical: calcs.x1t.toFixed(1)
          color: Red
          strokeWidth: params.dlt
          r: 3
          label:
            text: "` \\\\large E `"
            position: bl
          show: params.showCVEV == 2 && params.t >= 60 && params.t <= 180 && params.t > 0
      - Point:
          coordinates: [calcs.xmaxT, 0]
          droplines:
            vertical: calcs.xmaxT.toFixed(1)
          color: grey
          strokeWidth: params.dlt
          r: 0
          show: params.showCVEV == 2 && params.t > 0
      - Point:
          coordinates: [0,calcs.ymaxT]
          droplines:
            horizontal: calcs.ymaxT.toFixed(1)
          color: grey
          strokeWidth: params.dlt
          r: 0
          show: params.showCVEV == 2 && params.t > 0
      - Label:
          coordinates: [(0.7)*(calcs.maxX), (0.7)*(calcs.maxY)]
          text: \text{\LARGE BINGO!}
          color: Red
          position: c
          bgcolor: none
          show: params.showCVEV == 2 && calcs.tcheck == 0 && params.t > 0
      - Label:
          coordinates: [(0.7)*(calcs.maxX), (0.6)*(calcs.maxY)]
          text: "` \\\\Large EV = ${calcs.EV.toFixed(0)} `"
          color: Red
          position: c
          bgcolor: none
          show: params.showCVEV == 2 && calcs.tcheck == 0 && params.t > 0





# indifference curve at optimal bundle with tax
      - Curve:
          fn: ((calcs.utax)/((x)^(params.a)))^(1/(params.b))
          color: Black
          strokeWidth: 1.25
          show: params.showCVEV == 2 && calcs.tcheck !== 0 && params.t > 0
























    bottomGraph:
      xAxis:
        max: calcs.maxX
        ticks: 0
      yAxis:
        max: calcs.maxEUR
        ticks: 0

      objects:

      - Label:
            coordinates: [calcs.maxX, 0]
            text: "` \\\\text{Consumption (kg)} `"
            position: l
            yPixelOffset: -8
      - Label:
            coordinates: [0, calcs.maxEUR]
            text: "` \\\\text{euro/kg}  `"


# demand for good 1

      - Curve:
          fn: (calcs.s1)*(params.m)/(x)
          color: Blue
          strokeWidth: 1.5
          label:
            text: "` X = ${(params.m)/2} / P_X `"
            x: calcs.maxX
            position: b
            bgcolor: none

      - Point:
          coordinates: [calcs.x1old, params.p1]
          droplines:
            horizontal: params.p1
          strokeWidth: 0.5
          color: Blue
          r: 3
          label:
            text: "` A `"
            position: bl
            bgcolor: none
      - Point:
          coordinates: [calcs.x1old, 1000]
          droplines:
            vertical: calcs.x1old.toFixed(0)
          strokeWidth: 0.5
          color: Blue

      - Point:
          coordinates: [calcs.x1new, params.p1new]
          droplines:
            horizontal: params.p1new
          strokeWidth: 0.5
          color: Blue
          r: 3
          label:
            text: "` B `"
            position: bl
            bgcolor: none
      - Point:
          coordinates: [calcs.x1new, 1000]
          droplines:
            vertical: calcs.x1new.toFixed(0)
          strokeWidth: 0.5
          color: Blue



# compensated demand for good 1 at old utility

      - Curve:
          fn: ((calcs.s1)*(calcs.uold)*(params.p2))/((calcs.s2)*((x)^2))
          color: Red
          strokeWidth: 1
          label:
            text: "` X^C_{U=${calcs.uold}} `"
            x: calcs.maxX
            position: l
          show: params.showCVEV == 1 && calcs.scheck == 0

      - Point:
          coordinates: [calcs.x1cuold, params.p1new]
          strokeWidth: 0.5
          color: Red
          r: 3
          label:
            text: "` C `"
            position: bl
            bgcolor: none
          show: params.showCVEV == 1 && calcs.scheck == 0
      - Point:
          coordinates: [calcs.x1cuold, 1000]
          droplines:
            vertical: calcs.x1cuold.toFixed(1)
          strokeWidth: 0.5
          color: Red
          show: params.showCVEV == 1 && calcs.scheck == 0
      - Segment:
          a: [calcs.x1new, params.p1new]
          b: [calcs.x1cuold, params.p1new]
          strokeWidth: 0.5
          lineStyle: dotted
          color: Red
          show: params.showCVEV == 1 && calcs.scheck == 0



# compensated demand for good 1 at new utility

      - Curve:
          fn: ((calcs.s1)*(calcs.unew)*(params.p2))/((calcs.s2)*((x)^2))
          color: Red
          strokeWidth: 1
          label:
            text: "` X^C_{U=${calcs.unew}} `"
            x: calcs.maxX
            position: b
            bgcolor: none
          show: params.showCVEV == 2 && calcs.tcheck.toFixed(0) == 0

      - Point:
          coordinates: [calcs.x1cunew, params.p1]
          strokeWidth: 0.5
          color: Red
          r: 3
          label:
            text: "` E `"
            position: bl
            bgcolor: none
          show: params.showCVEV == 2 && calcs.tcheck.toFixed(0) == 0
      - Point:
          coordinates: [calcs.x1cuold, 1000]
          droplines:
            vertical: calcs.x1cunew.toFixed(1)
          strokeWidth: 0.5
          color: Red
          show: params.showCVEV == 2 && calcs.tcheck.toFixed(0) == 0
      - Segment:
          a: [calcs.x1old, params.p1]
          b: [calcs.x1cunew, params.p1]
          strokeWidth: 0.5
          lineStyle: dotted
          color: Red
          show: params.showCVEV == 2 && calcs.tcheck.toFixed(0) == 0




# colored areas
      - Area:
          fn1: min((params.p1new),((params.m)/(2))/(x))
          fn2: max(params.p1,((calcs.s1)*(calcs.unew)*(params.p2))/((calcs.s2)*((x)^2)))
          fill: red
          min: calcs.x1old
          max: calcs.x1new
      - Label:
          coordinates: [30,36]
          text: "` \\\\Delta CS = ${-calcs.deltaCS.toFixed(2)} = - \\\\text{red area} `"
          color: Red
          bgcolor: none
          show: calcs.tcheck !== 0 || params.showCVEV !== 2
      - Label:
          coordinates: [30,36]
          text: "` \\\\Delta CS = ${-calcs.deltaCS.toFixed(2)} = - (\\\\text{red area} + \\\\text{\\\\color{Purple} purple area}) `"
          color: Red
          bgcolor: none
          show: calcs.tcheck == 0 && params.showCVEV == 2
      - Area:
          fn1: min((params.p1new),((calcs.s1)*(calcs.unew)*(params.p2))/((calcs.s2)*((x)^2)))
          fn2: params.p1
          fill: red
          min: 0
          max: calcs.x1cunew
          show: calcs.tcheck !== 0 || params.showCVEV !== 2


      - Area:
          fn1: min((params.p1new),((calcs.s1)*(calcs.uold)*(params.p2))/((calcs.s2)*((x)^2)))
          fn2: (calcs.s1)*(params.m)/(x)
          fill: blue
          min: calcs.x1new
          max: calcs.x1old
          show: params.showCVEV == 1 && calcs.scheck == 0
      - Label:
          coordinates: [30,32]
          text: "` CV = ${calcs.CV.toFixed(2)} = \\\\text{\\\\color{red}red area} + \\\\text{blue area} `"
          color: Blue
          bgcolor: none
          show: params.showCVEV == 1 && calcs.scheck == 0


      - Area:
          fn1: min((params.p1new),((calcs.s1)*(calcs.unew)*(params.p2))/((calcs.s2)*((x)^2)))
          fn2: params.p1
          fill: Purple
          min: 0
          max: calcs.x1cunew
          show: params.showCVEV == 2 && calcs.tcheck == 0
      - Label:
          coordinates: [30,32]
          text: "` EV = ${calcs.EV.toFixed(2)} = \\\\text{purple area} `"
          color: Purple
          bgcolor: none
          show: params.showCVEV == 2 && calcs.tcheck == 0





    sidebar:
      controls:

      - title: Compensating Variation and Equivalent Variation
        # description: Scegliere il tipo di compensazione per visualizzare 
        #               vincolo di bilancio e scelta ottima corrispondenti ai nuovi prezzi e al 
        #               reddito compensato.
        radioGroup:
          param: showCVEV
          options:
            - Show only optimal choice
            - Compute compensating variation
            - Compute equivalent variation
        # divs:
        #   - html: "` $ ${calcs.tcheck} $ `"
        #   - html: "` `"
        #   - html: "` Il reddito del consumatore è $M=${params.m}$. `"
        #   - html: "` Quando $P_X=${params.p1}$ e $P_Y=${params.p2}$, la scelta ottima è il paniere rappresentato dal punto $A$ 
        #                $$ X=${calcs.x1old}  \\\\qquad  Y=${calcs.x2old}  $$ `"
        #   - html: "` Quando $P_X=${params.p1new}$ e $P_Y=${params.p2}$, la scelta ottima è il paniere rappresentato dal punto $B$ 
        #                $$ X=${calcs.x1new}  \\\\qquad  Y=${calcs.x2new}  $$ `"
        #   - html: "` `"


      - title: Compensating Variation
        description: Find the compensation necessary to bring the consumer back to the level of
                        utility that he had before the increase in the price of consumption. 
        sliders:
        - param: s
          label: "` \\\\text{Subsidy} `"
        divs:
          - html: "`  `"
          - html: "` A subsidy of ${params.s} euros incerases the income of the consumer to 
                      ${(params.m)+(params.s)} euros. `"
            show: params.showCVEV == 1 && params.s > 0
          - html: "` <i><b>However, this is not enough to bring consumer welfare back to 
                      the old level.</b></i> `"
            show: calcs.scheck < 0 && params.showCVEV == 1 && params.s > 0
          - html: "` <i><b>This is just enough to bring consumer welfare back to  
                      the old level.</b></i> `"
            show: calcs.scheck == 0 && params.showCVEV == 1 && params.s > 0
          - html: "` <i><b>However, this is more than what is needed  to bring consumer welfare back to
                      the old level.</b></i> `"
            show: calcs.scheck > 0 && params.showCVEV == 1 && params.s > 0
          - html: "` Indeed, when $P_X=${params.p1new}$ and $P_Y=${params.p2}$, the optimal
                     choice is bundle  $C$, that is, 
                       $$
                       X=\\\\frac{${calcs.MplusS.toFixed(0)}/2}{${params.p1new}} = ${calcs.x1s.toFixed(1)}
                       \\\\qquad
                       Y=\\\\frac{${calcs.MplusS.toFixed(0)}/2}{${params.p2}}=${calcs.x2s.toFixed(1)}
                       $$ `"
            show: params.showCVEV == 1 && params.s > 0
          - html: "` which lies on an indifference curve lower than the curve passing through $A$. `"
            show: calcs.scheck < 0 && params.showCVEV == 1 && params.s > 0
          - html: "` which lies on the same indifference curve as $A$. `"
            show: calcs.scheck == 0 && params.showCVEV == 1 && params.s > 0
          - html: "` The compensating variation $CV$ is easy to compute. Once the consumer receives
                    the subsidy, income becomes ${params.m}+CV$, but the optimal choice is found the
                    same way as before: spend equal parts of the income on the two goods.
                    The compensating variation is therefore the solution to the equation
                    $$
                    \\\\frac{(${params.m}+CV)/2}{${params.p1new}}\\\\times\\\\frac{(${params.m}+CV)/2}{${params.p2}}=${calcs.uold.toFixed(0)}
                    $$
                    `"
            show: calcs.scheck == 0 && params.showCVEV == 1 && params.s > 0
          - html: "` which lies on an indifference curve higher than the curve passing through $A$. `"
            show: calcs.scheck > 0 && params.showCVEV == 1 && params.s > 0
          - html: "` `"
          - html: "` `"
        show: params.showCVEV == 1

        # checkboxes:
        # - param: showCV
        #   label: "\\text{Mostra variazione compensativa}"
        # - param: showEV
        #   label: "\\text{Mostra variazione equivalente}"
        # sliders:
        # - param: a
        #   label: a
        # - param: b
        #   label: b
        # divs:
        #   - html: "` `"
        #   - html: "` `"
        #   - html: "` `"
        #   - html: "` `"
        #     show: params.showCV == 1

      - title: Equivalent Variation
        description: Find the income reduction that would bring the consumer to the level of
                        utility that he has after the increase in the price of consumption. 
        sliders:
        - param: t
          label: "` \\\\text{Tax} `"
        divs:
          - html: "` A tax of ${params.t} euros reduces the income of the consumer to 
                      ${(params.m)-(params.t)} euros. `"
            show: params.showCVEV == 2 && params.t > 0
          - html: "` 
                  <i><b>This variation of income is not equivalent to the increase in the 
                  price of consumption from
                   $P_X=${params.p1}$ to $P_X=${params.p1new}$.</b></i>
                  `"
            show: calcs.tcheck !== 0 && params.showCVEV == 2 && params.t > 0
          - html: "` <i><b>This variation of income is equivalent to the increase in the
                  price of consumption from
                   $P_X=${params.p1}$ to $P_X=${params.p1new}$.</b></i> `"
            show: calcs.tcheck.toFixed(0) == 0 && params.showCVEV == 2 && params.t > 0
          - html: "` Indeed, when $P_X=${params.p1}$ and $P_Y=${params.p2}$, the optimal choice 
                    is bundle $E$, that is, 
                       $$
                       X=\\\\frac{${calcs.MminusT.toFixed(0)}/2}{${params.p1}} = ${calcs.x1t.toFixed(1)}
                       \\\\qquad
                       Y=\\\\frac{${calcs.MminusT.toFixed(0)}/2}{${params.p2}}=${calcs.x2t.toFixed(1)}
                       $$ 
                  `"
            show: params.showCVEV == 2 && params.t > 0
          - html: "` which lies on an indifference curve lower than the curve passing through $B$. `"
            show: calcs.tcheck > 0 && params.showCVEV == 2 && params.t > 0
          - html: "` which lies on the same indifference curve as $B$. `"
            show: calcs.tcheck.toFixed(0) == 0 && params.showCVEV == 2
          - html: "` The equivalent variation $EV$ is easy to compute. Once the consumer pays
                    the tax, income becomes ${params.m}-EV$, but the optimal choice is found the
                    same way as before: spend equal parts of the income on the two goods.
                    The equivalent variation is therefore the solution to the equation
                    $$
                    \\\\frac{(${params.m}-EV)/2}{${params.p1}}\\\\times\\\\frac{(${params.m}-EV)/2}{${params.p2}}=${calcs.unew.toFixed(0)}
                    $$
                    `"
            show: calcs.tcheck.toFixed(0) == 0 && params.showCVEV == 2
          - html: "` which lies on an indifference curve higher than the curve passing through $B$. `"
            show: calcs.tcheck < 0 && params.showCVEV == 2 && params.t > 0
        show: params.showCVEV == 2


    explanation:

        divs:


          - html: <br><br><br><br><br><br><br><br>
            show: params.showCVEV == 0


          - html: "` The blue curve in the bottom graph is the demand of consumption (good $X$)
                    when income is $M=${params.m}$ and the price of housing  (good $Y$) is
                    $P_Y=${params.p2}$. When the price of consumption is 
                    $P_X=${params.p1}$, demanded quantity is
                    $X=${calcs.x1old.toFixed(0)}$ and utility is $U=${calcs.uold.toFixed(0)}$.
                    `"
            show: calcs.scheck == 0 && params.showCVEV == 1
          - html: "` The red curve  $X^C_{U=${calcs.uold}}$ is the <b>compensated demand curve</b>
                     for good $X$ corresponding to utility level $U=${calcs.uold.toFixed(0)}$.
                      The curve measures, for each possible value of $P_X$, the quantity of  $X$ that the
                      consumer <i>would</i> demand if he had just enough income to achieve
                       utility level $U=${calcs.uold.toFixed(0)}$.
                      The compensating  variation  equals the area to the left of  
                      the curve $X^C_{${calcs.uold}}$. 
                      A deeper discussion on the concept of compensated demand, and a precise
                       explanation for this equality, would go beyond the scope of these notes, so
                       we omit the arguments.
                    `"
            show: calcs.scheck == 0 && params.showCVEV == 1



          - html: "` The blue curve in the bottom graph is the demand of consumption (good $X$)
                    when income is $M=${params.m}$ and the price of housing  (good $Y$) is
                    $P_Y=${params.p2}$. When the price of consumption is 
                    $P_X=${params.p1new}$, demanded quantity is
                    $X=${calcs.x1new.toFixed(0)}$ and utility is $U=${calcs.unew.toFixed(0)}$.
                    `"
            show: calcs.tcheck.toFixed(0) == 0 && params.showCVEV == 2
          - html: "` The red curve  $X^C_{U=${calcs.unew}}$ is the <b>compensated demand curve</b>
                     for good $X$ corresponding to utility level $U=${calcs.unew.toFixed(0)}$.
                      The curve measures, for each possible value of $P_X$, the quantity of  $X$ that the
                      consumer <i>would</i> demand if he had just enough income to achieve
                       utility level $U=${calcs.unew.toFixed(0)}$.
                      The equivalent  variation  equals the area to the left of  
                      the curve $X^C_{${calcs.unew}}$.
                      A deeper discussion on the concept of compensated demand, and a precise
                       explanation for this equality, would go beyond the scope of these notes, so
                       we omit the arguments.
                    `"
            show: calcs.tcheck.toFixed(0) == 0 && params.showCVEV == 2









        # checkboxes:
        # - param: showCV
        #   label: "\\text{Mostra variazione compensativa}"
        # - param: showEV
        #   label: "\\text{Mostra variazione equivalente}"
        # sliders:
        # - param: a
        #   label: a
        # - param: b
        #   label: b
        # divs:
        #   - html: "` `"
        #   - html: "` `"
        #   - html: "` `"
        #   - html: "` `"
        #     show: params.showCV == 1










