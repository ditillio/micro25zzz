params:

- {name: a, value: 5, min: 3, max: 7, round: 1}

- {name: A, value: 80, min: 40, max: 100, round: 10}
- {name: w, value: 64, min: 40, max: 80}
- {name: p, value: 1.5, min: 0.5, max: 4, round: 0.05}
- {name: fc, value: 100, min: 50, max: 200, round: 10}
- {name: numimp, value: 20, min: 10, max: 40, round: 1}
- {name: numcons, value: 1000}

- {name: maxfirms, value: 0}


calcs:

  nnn: (10)*((1)+(params.maxfirms)) # max number of firms (30 = infinity)

  xopt: ( params.A * params.A / ( 2 * params.w ) ) * params.p

  tr: params.p * calcs.xopt
  vc: (calcs.xopt)^(2) / 100
  tc: calcs.vc + (params.fc)
  econprofit: calcs.tr - calcs.vc
  accprofit: calcs.tr - calcs.tc

  mc: calcs.xopt / 50
  avc: (calcs.xopt) / 100
  atc: calcs.xopt / 100 + (params.fc) / calcs.xopt

  mktsupply: (calcs.nnn)*(calcs.xopt)
  acmin: (2)*(sqrt((params.fc)*(params.w)))/(params.A)
  qeff: (params.A)*(sqrt((params.fc)/(params.w)))

  eqQ: (5) / ( ( 2 * params.w / ( ( params.A * params.A ) * (params.numimp) ) ) + (1)/(params.numcons) ) 

  eqP: (5) - (calcs.eqQ) / (params.numcons)

aspectRatio: 2

layout:
  TwoHorizontalGraphsPlusSidebar:

    leftGraph: 
      xAxis:
        max: 210
        min: -3
        ticks: 0
      yAxis:
        max: 5.5
        ticks: 10
      label: a

      objects:

        - Label:
                coordinates: [210, 0]
                text: "` \\\\text{kg} `"
                yPixelOffset: 0
                xPixelOffset: -5
                position: l
        - Label:
                coordinates: [0, 5.5]
                text: "` \\\\text{euro/kg}  `"
                xPixelOffset: 0

# optimal choice
        - Point:
            coordinates: [calcs.xopt, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: calcs.xopt.toFixed(2)
            strokeWidth: 0.5
            show: params.p > calcs.acmin

        - Point:
            coordinates: [0.3, params.p]
            color: Red
            droplines:
              vertical: 0
            r: 4.5
            show: params.p < calcs.acmin

        - Point:
            coordinates: [0.3, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: 0.00
            show: params.p.toFixed(2) == calcs.acmin.toFixed(2)

        - Point:
            coordinates: [calcs.qeff, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: calcs.qeff.toFixed(2)
            show: params.p.toFixed(2) == calcs.acmin.toFixed(2)


# price line
        - Line:
            yIntercept: params.p
            color: Green
            label:
              text: P
              x: 210
              position: l
            strokeWidth: 1
            bgcolor: none
            drag:
              - vertical: p

# LR supply curve
        - Curve:
            fn: ( 2 * params.w / ( params.A * params.A ) ) * (x)
            color: Red
            label:
              text: S^i_{LR}
              x: 210
              position: l
            strokeWidth: 2.5
            min: calcs.qeff

        - Segment:
            a: [0.5,0]
            b: [0.5,calcs.acmin]
            color: Red
            strokeWidth: 3

        - Point:
            coordinates: [0.5, calcs.acmin]
            color: Red
            r: 2.5
            show: params.p !== calcs.acmin

        - Point:
            coordinates: [calcs.qeff, calcs.acmin]
            color: Red
            r: 2.5
            show: params.p !== calcs.acmin

# marginal cost curve
        - Curve:
            fn: ( 2 * params.w / ( params.A * params.A ) ) * (x)
            color: Red
            label:
              text: MC
              x: 50
              position: bl
            strokeWidth: 0.7
            lineStyle: dashed


# average cost curve
        - Curve:
            fn: ( params.fc / (x) ) + ( params.w / ( params.A * params.A ) ) * (x)
            color: Brown
            label:
              text: AC
              x: 27
            strokeWidth: 0.7
            min: 0.5
            lineStyle: dashed

# Qeff & ACmin
        - Point:
            coordinates: [calcs.qeff, calcs.acmin]
            droplines:
              vertical:
              horizontal:
            strokeWidth: 0.7
            color: Blue
            r: 0

        - Label:
            coordinates: [calcs.qeff, 0]
            text: "` Q^{\\\\text{eff}} = ${calcs.qeff.toFixed(0)} `"
            yPixelOffset: -32
            xPixelOffset: 
            position: c
            color: Blue

        - Label:
            coordinates: [0, calcs.acmin]
            text: "` AC_{\\\\text{min}} = ${calcs.acmin.toFixed(0)} `"
            yPixelOffset: 
            xPixelOffset: -75
            position: c
            color: Blue











    rightGraph: 
      xAxis:
        max: 5000
        min: -50
        ticks: 0
      yAxis:
        max: 5.5
        ticks: 10
      label: a

      objects:

        - Label:
                coordinates: [5000, 0]
                text: "` \\\\text{kg} `"
        - Label:
                coordinates: [0, 5.5]
                text: "` \\\\text{euro/kg}  `"

# LR supply curve
        - Segment:
            a: [0,0]
            b: [0,calcs.acmin]
            color: Red
            strokeWidth: 3
        - Points: {coordinates: [[0,calcs.acmin],[calcs.qeff,calcs.acmin],[(2)*(calcs.qeff),calcs.acmin],[(3)*(calcs.qeff),calcs.acmin],[(4)*(calcs.qeff),calcs.acmin],[(5)*(calcs.qeff),calcs.acmin],[(6)*(calcs.qeff),calcs.acmin],[(7)*(calcs.qeff),calcs.acmin],[(8)*(calcs.qeff),calcs.acmin],[(9)*(calcs.qeff),calcs.acmin],[(10)*(calcs.qeff),calcs.acmin]], color: Red, r: 2}

        - Point: {coordinates: [(11)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 11}
        - Point: {coordinates: [(12)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 12}
        - Point: {coordinates: [(13)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 13}
        - Point: {coordinates: [(14)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 14}
        - Point: {coordinates: [(15)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 15}
        - Point: {coordinates: [(16)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 16}
        - Point: {coordinates: [(17)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 17}
        - Point: {coordinates: [(18)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 18}
        - Point: {coordinates: [(19)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 19}
        - Point: {coordinates: [(20)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 20}
        - Point: {coordinates: [(21)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 21}
        - Point: {coordinates: [(22)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 22}
        - Point: {coordinates: [(23)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 23}
        - Point: {coordinates: [(24)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 24}
        - Point: {coordinates: [(25)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 25}
        - Point: {coordinates: [(26)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 26}
        - Point: {coordinates: [(27)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 27}
        - Point: {coordinates: [(28)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 28}
        - Point: {coordinates: [(29)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 29}
        - Point: {coordinates: [(30)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(31)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(32)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(33)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(34)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(35)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(36)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(37)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(38)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(39)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(40)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(41)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(42)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(43)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(44)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(45)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(46)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(47)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(48)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(49)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}
        - Point: {coordinates: [(50)*(calcs.qeff),calcs.acmin], color: Red, r: 2, show: calcs.nnn >= 30}

        - Curve:
            fn: ( 2 * params.w / ( ( params.A * params.A ) * (calcs.nnn) ) ) * (x)
            color: Red
            label:
              text: "` S^{ ${calcs.nnn} }_{LR} `"
              x: min(5000,(calcs.nnn)*( params.A * params.A / ( 2 * params.w ) ) * (5.5))
            strokeWidth: 2
            min: (calcs.nnn)*(calcs.qeff)
            show: calcs.nnn < 30
        - Label:
            coordinates: [5000, calcs.acmin]
            text: "` S_{LR} `"
            position: l
            color: Red
            show: calcs.nnn >= 30

# market supply

        - Point:
            coordinates: [calcs.mktsupply, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: calcs.mktsupply.toFixed(2)
            strokeWidth: 0.5
            show: params.p > calcs.acmin && calcs.nnn < 30

        - Point:
            coordinates: [0.3, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: 0
            show: params.p < calcs.acmin

        - Point:
            coordinates: [0.3, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: 0
            show: params.p.toFixed(2) == calcs.acmin.toFixed(2)
        - Point:
            coordinates: [calcs.mktsupply, params.p]
            color: Red
            r: 4.5
            droplines:
              vertical: calcs.mktsupply.toFixed(2)
            show: params.p.toFixed(2) == calcs.acmin.toFixed(2) && calcs.nnn < 30

        - Points: {coordinates: [[0,calcs.acmin],[calcs.qeff,calcs.acmin],[(2)*(calcs.qeff),calcs.acmin],[(3)*(calcs.qeff),calcs.acmin],[(4)*(calcs.qeff),calcs.acmin],[(5)*(calcs.qeff),calcs.acmin],[(6)*(calcs.qeff),calcs.acmin],[(7)*(calcs.qeff),calcs.acmin],[(8)*(calcs.qeff),calcs.acmin],[(9)*(calcs.qeff),calcs.acmin],[(10)*(calcs.qeff),calcs.acmin]], color: Red, r: 4, show: params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(11)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 11 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(12)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 12 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(13)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 13 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(14)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 14 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(15)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 15 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(16)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 16 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(17)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 17 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(18)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 18 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(19)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 19 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(20)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 20 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(21)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 21 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(22)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 22 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(23)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 23 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(24)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 24 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(25)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 25 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(26)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 26 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(27)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 27 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(28)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 28 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(29)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 29 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(30)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(31)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(32)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(33)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(34)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(35)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(36)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(37)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(38)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(39)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(40)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(41)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(42)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(43)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(44)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(45)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(46)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(47)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(48)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(49)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}
        - Point: {coordinates: [(50)*(calcs.qeff),calcs.acmin], color: Red, r: 4, show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)}





# price line
        - Line:
            yIntercept: params.p
            color: Green
            label:
              text: P
              x: 5000
              position: bl
            strokeWidth: 1
            bgcolor: none
            drag:
              - vertical: p

























    sidebar:
      controls:
      - title: Individuale and Market Supply in the Long Run


        radioGroup:
          param: maxfirms
          options:
            - 10 potential firms
            - 20 potential firms
            - ∞ potential firms

        sliders:
        - param: p
          label: P

        divs:
        - html: "` 
                 `"


    explanation:
      divs:
        - html: "` If the maximum number of firms that can enter the market is only ${calcs.nnn},
         then the long-run market supply curve is the curve $S^{${calcs.nnn}}_{LR}$ in 
         the right-hand graph, which is the horizontal sum of ${calcs.nnn} individual curves
          like the one shown in the left-hand graph (curve $S^i_{LR}$). The quantity supplied is 
          zero for prices below the minimum average cost, and equal to ${calcs.nnn} times the
           optimal quantity of a single firm for prices above it. If the price is exactly equal 
           to the minimum average cost, then the quantity supplied is a multiple of the efficient
            scale of production (the points forming the horizontal segment of the curve 
            $S^{${calcs.nnn}}_{LR}$ are spaced exactly $Q^{\\\\text{eff}}$ units apart). `"
          show: calcs.nnn < 30

        - html: "` With a potentially infinite number of firms, the long-run market supply
         curve is a horizontal line at the level of the minimum average cost. More precisely,
          the quantity supplied is zero for prices below the minimum average cost and
           infinite for prices above it. If the price is exactly equal to the minimum 
           average cost, then the quantity supplied can be any multiple of the efficient 
           scale of production (the points forming the horizontal segment of the curve 
           $S_{LR}$ are spaced exactly $Q^{\\\\text{eff}}$ units apart). `"
          show: calcs.nnn >= 30

        - html: "` Since $AC_{\\\\text{min}}=${calcs.acmin}$, if the market price is 
        $P=${params.p.toFixed(2)}$, we have $P < AC_{\\\\text{min}}$, so none of the 
        potential firms is willing to enter the market. The long-run quantity supplied
         is zero. `"
          show: params.p.toFixed(2) < calcs.acmin.toFixed(2)

        - html: "` Since $AC_{\\\\text{min}}=${calcs.acmin}$, if the market price
        is $P=${params.p.toFixed(2)}$, we have $P > AC_{\\\\text{min}}$, so all firms 
        will want to enter the market and produce a positive quantity. The long-run
         quantity supplied is ${calcs.nnn} times the quantity that maximizes the 
         profit of a single firm. `"
          show: calcs.nnn < 30 && params.p.toFixed(2) > calcs.acmin.toFixed(2)

        - html: "` Since $AC_{\\\\text{min}}=${calcs.acmin}$, if the market price 
        is $P=${params.p.toFixed(2)}$, we have $P > AC_{\\\\text{min}}$, so all firms
         will want to enter the market and produce a positive quantity. The long-run 
         quantity supplied is infinite. `"
          show: calcs.nnn >= 30 && params.p.toFixed(2) > calcs.acmin.toFixed(2)

        - html: "` Since $AC_{\\\\text{min}}=${calcs.acmin}$, if the market price is
         $P=${params.p.toFixed(2)}$, we have $P = AC_{\\\\text{min}}$, so all firms 
         are indifferent between producing zero (staying out of the market) or
         entering the market and producing the quantity $Q^{\\\\text{eff}}=100$. 
         The long-run quantity supplied can be any multiple of $100$ between zero 
         (none decide to enter) and ${(100)*(calcs.nnn)} (all decide to enter). `"
          show: calcs.nnn < 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)

        - html: "` Since $AC_{\\\\text{min}}=${calcs.acmin}$, if the market price is
         $P=${params.p.toFixed(2)}$, we have $P = AC_{\\\\text{min}}$, so all firms 
         are indifferent between producing zero (staying out of the market) or 
         entering the market and producing the quantity $Q^{\\\\text{eff}}=100$. 
         The long-run quantity supplied can be any multiple of $100$. `"
          show: calcs.nnn >= 30 && params.p.toFixed(2) == calcs.acmin.toFixed(2)








