params:
- {name: showCS, value: false}
- {name: op1, value: 0.15}
- {name: op2, value: 0.1}
- {name: ops, value: 0.2}
- {name: alpha, value: 0.5, min: 0.3, max: 0.7, round: 0.1}
- {name: A, value: 80, min: 60, max: 100, round: 10}
- {name: l, value: 4, min: 0.1, max: 6, round: 0.1}

calcs:
  x: (params.A)*((params.l)^(params.alpha))
  ap: (calcs.x) / (params.l)
  mp: (params.alpha) * (calcs.x) / (params.l)

#aspectRatio: 0.7

layout:
  TwoVerticalGraphsPlusSidebar:

    topGraph: 
      xAxis:
        max: 6
        ticks: 5
      yAxis:
        max: 300
        ticks: 0

      objects:

        - Label:
                coordinates: [6, 0]
                text: "` \\\\text{Lavoro (gg)} `"
                yPixelOffset: 0
                xPixelOffset: -5
                position: l
        - Label:
                coordinates: [0, 300]
                text: "` \\\\text{Output (kg)}  `"
                xPixelOffset: -6

# points
        - Point:
            coordinates: [params.l, calcs.x]
            droplines: {vertical: params.l.toFixed(1), horizontal: calcs.x.toFixed(1)}
            color: Blue
            r: 5
            drag:
            - horizontal: l

# production function

        - Curve:
            fn: (params.A)*((x)^(params.alpha))
            color: Blue
            label:
              text: "` Q=F(L)= ${params.A} \\\\sqrt{L} `"
              x: 6
              position: c
            strokeWidth: 1.7

    bottomGraph: 
      xAxis:
        max: 6
        ticks: 5
      yAxis:
        max: 200
        ticks: 0

      objects:

        - Label:
                coordinates: [6, 0]
                text: "` \\\\text{Lavoro (gg)} `"
                yPixelOffset: 0
                xPixelOffset: -5
                position: l
        - Label:
                coordinates: [0, 200]
                text: "` \\\\text{kg/gg}  `"
                xPixelOffset: -6

# points
        - Point:
            coordinates: [params.l, calcs.ap]
            droplines: {vertical: params.l.toFixed(1), horizontal: calcs.ap.toFixed(1)}
            color: Brown
            r: 5
            drag:
            - horizontal: l

        - Point:
            coordinates: [params.l, calcs.mp]
            droplines: {vertical: params.l.toFixed(1), horizontal: calcs.mp.toFixed(1)}
            color: Red
            r: 5
            drag:
            - horizontal: l

# AP_L

        - Curve:
            fn: ((params.A)*((x)^(params.alpha)))/(x)
            color: Brown
            label:
              text: "` AP_L = ${params.A} /\\\\sqrt{L} `"
              x: 6
              position: c
            strokeWidth: 1.7

# MP_L

        - Curve:
            fn: (params.alpha)*((params.A)*((x)^(params.alpha)))/(x)
            color: Red
            label:
              text: "` MP_L = ${(params.alpha)*(params.A)} / \\\\sqrt{L} `"
              x: 6
              position: c
            strokeWidth: 1.7

    sidebar:
      controls:
      - title: Funzione di produzione, prodotto medio e prodotto marginale
        sliders:
        # - param: alpha
        #   label: \alpha
        - param: A
          label: A
        - param: l
          label: L
        divs:
        - html: "` Quando l'impresa impiega $L=${params.l.toFixed(1)}$ unità di lavoro, la quantità di output, il prodotto medio ed il
                      prodotto marginale 
                    sono rispettivamente $Q=${calcs.x.toFixed(1)}$, $AP_L=${calcs.ap.toFixed(1)}$ e $MP_L=${calcs.mp.toFixed(1)}$. `"
          show: params.alpha > 0
