params:

- {name: w2, value: 10000, min: 0, max: 10000} # wealth if loss does not occur
- {name: p, value: 0.4, min: 0.2, max: 0.6, round: 0.1}  # probability of loss

- {name: pi, value: 0.5, min: 0.1, max: 4, round: 0.1} # one minus relative risk aversion coefficient


- {name: d, value: 10000, min: 1900, max: 10000, round: 100} # possible loss



calcs:

  r: (1)-(params.pi)

  w1: (10000)-(params.d)
  w2: params.w2

  a: (1)-(calcs.r)

  p1: (params.p)
  p2: (1)-(calcs.p1)

  u1: (calcs.w1)^(calcs.a)
  u2: (calcs.w2)^(calcs.a)

  EP: (calcs.p1)*(calcs.w1)+(calcs.p2)*(calcs.w2)

  EU: (calcs.p1)*(calcs.u1)+(calcs.p2)*(calcs.u2)
  CE: (calcs.EU)^((1)/(calcs.a))

  RP: (calcs.EP)-(calcs.CE)

  WTP: (calcs.w2)-(calcs.CE)

  FP: (params.p)*(params.d)

  maxU: (1.1)*(calcs.u2)



aspectRatio: 0.7

layout:
  TwoVerticalGraphsPlusSidebar:

    topGraph: 
      xAxis:
        max: 11500
        ticks: 0
      yAxis:
        max: calcs.maxU
        ticks: 0

      objects:

        - Label:
            coordinates: [11500, 0]
            text: "` \\\\text{Ricchezza} `"
        - Label:
            coordinates: [0, calcs.maxU]
            text: "` \\\\text{Utilit√†}  `"

# bernoulli utility function

        - Curve:
            fn: (x)^(1-(calcs.r))
            color: Blue
            max: 10500
            label:
              text: "` u(W)=W^{${calcs.a.toFixed(1)}} `"
              x: 10500
              position: l
            strokeWidth: 1.5

# points & segment
        - Point:
            coordinates: [calcs.w1, calcs.u1]
            droplines: {vertical: calcs.w1.toFixed(0), horizontal: calcs.u1.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 3.5
        - Point:
            coordinates: [calcs.w2, calcs.u2]
            droplines: {vertical: calcs.w2.toFixed(0), horizontal: calcs.u2.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 3.5
        - Point:
            coordinates: [calcs.EP, calcs.EU]
            droplines: {vertical: calcs.EP.toFixed(0), horizontal: calcs.EU.toFixed(2)}
            strokeWidth: 0.5
            color: Red
            r: 2.5
        - Point:
            coordinates: [calcs.CE, calcs.EU]
            droplines: {vertical: calcs.CE.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 2.5
        - Segment:
            a: [calcs.w1, calcs.u1]
            b: [calcs.w2, calcs.u2]
            color: Red
            strokeWidth: 1
            lineStyle: dashed
        - Segment:
            a: [calcs.CE, calcs.EU]
            b: [calcs.EP, calcs.EU]
            color: Purple
            strokeWidth: 0.5
            lineStyle: dotted
            show: calcs.RP < 0

# risk premium (when positive)
        - Label:
            coordinates: [((calcs.EP)+(calcs.CE))/2, (calcs.maxU)/(16)]
            text: "` RP `"
            color: Purple
            show: calcs.RP > 0
        - Arrow:
            begin: [calcs.CE, (calcs.maxU)/(30)]
            end: [calcs.EP, (calcs.maxU)/(30)]
            double: true
            color: Purple
            strokeWidth: 1
            show: calcs.RP > 0

# risk premium (when negative)
        - Label:
            coordinates: [((calcs.EP)+(calcs.CE))/2, (calcs.maxU)/(6.5)]
            text: "` -RP `"
            color: Purple
            show: calcs.RP < 0
        - Arrow:
            begin: [calcs.CE, (calcs.maxU)/(8.5)]
            end: [calcs.EP, (calcs.maxU)/(8.5)]
            double: true
            color: Purple
            strokeWidth: 1
            show: calcs.RP < 0

# fair premium
        - Label:
            coordinates: [((calcs.EP)+(calcs.w2))/2, (calcs.maxU)/(16)]
            text: "` FP `"
            color: Darkgreen
        - Arrow:
            begin: [calcs.EP, (calcs.maxU)/(30)]
            end: [calcs.w2, (calcs.maxU)/(30)]
            double: true
            color: Darkgreen
            strokeWidth: 1

# willingness to pay
        - Label:
            coordinates: [((calcs.CE)+(calcs.w2))/2, (calcs.maxU)/(6.5)]
            text: "` WTP `"
            color: Blue
        - Arrow:
            begin: [calcs.CE, (calcs.maxU)/(8.5)]
            end: [calcs.w2, (calcs.maxU)/(8.5)]
            double: true
            color: Blue
            strokeWidth: 1















    bottomGraph: 
      xAxis:
        max: 5
        ticks: 0
      yAxis:
        max: 11000
        ticks: 0

      objects:

        - Label:
            coordinates: [5, 0]
            text: "` \\\\text{propensione} `"
            position: l
            yPixelOffset: 10
        - Label:
            coordinates: [5, 0]
            text: "` \\\\text{al rischio ($\\\\pi$)} `"
            position: l
            yPixelOffset: -10
        - Label:
            coordinates: [0, 11000]
            text: "` \\\\text{euro/polizza}  `"



        - Curve:
            fn: (params.d) * ( (1) - ( (1) - (params.p) ) ^ ( (1) / (x) ) )
            color: Blue
            max: 4.5
            label:
              text: "` WTP `"
              x: 4.5
              position: b
            strokeWidth: 1.5

        - Point:
            coordinates: [(1)-(calcs.r), calcs.WTP]
            droplines: {vertical: params.pi.toFixed(1), horizontal: calcs.WTP.toFixed(2)}
            strokeWidth: 0.5
            color: Blue
            r: 2.5

















    sidebar:

      controls:

      - title: Domanda di assicurazione
        description: Muovere il cursore per ... 

        # radioGroup:
        #   param: which
        #   options:
        #     - Mantieni ùê∏ùëÉ = 50 costante
        #     - Mantieni ùê∏ùëà = 5 costante

        sliders:
        - param: p
          label: p
        # - param: d
        #   label: D
        - param: pi
          label: \pi

        divs:
        - html: <br>
        - html: "`  $ EP = ${calcs.EP} $
                      `"
        - html: "`  $ EU = ${calcs.EU} $
                      `"
        - html: "`  $ CE = ${calcs.CE} $
                      `"
          show: calcs.r < 1000






    # explanation:
    #   divs:
    #     - html: "` 
    #                   `"
    #       show: calcs.r < 1000
















